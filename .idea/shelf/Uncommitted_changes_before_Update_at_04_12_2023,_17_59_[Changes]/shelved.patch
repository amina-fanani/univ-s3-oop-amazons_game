Index: app/src/test/java/amazons/figures/EmptyFigureTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package amazons.figures;\n\nimport amazons.IllegalMoveException;\nimport amazons.board.MatrixBoard;\nimport amazons.board.Position;\nimport amazons.player.PlayerID;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.*;\nimport static amazons.figures.EmptyFigure.*;\n\npublic class EmptyFigureTest {\n    @Test\n    void testCanMoveTo(){\n        assertThat(EMPTY_FIGURE.canMoveTo(null, null)).isEqualTo(false);\n        assertThat(EMPTY_FIGURE.canMoveTo(new Position(0,0), new MatrixBoard(3,3))).isEqualTo(false);\n    }\n\n    @Test\n    void testMoveTo(){\n        assertThatExceptionOfType(IllegalMoveException.class)\n                .isThrownBy(() -> EMPTY_FIGURE.moveTo(null,null))\n                .withMessageMatching(\"A neutral figure can't be moved\");\n    }\n    @Test\n    void testGetPlayerID(){\n        assertThat(EMPTY_FIGURE.getPlayerID()).isEqualTo(PlayerID.NONE);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/amazons/figures/EmptyFigureTest.java b/app/src/test/java/amazons/figures/EmptyFigureTest.java
--- a/app/src/test/java/amazons/figures/EmptyFigureTest.java	(revision 6ed3be79c0db9a3722950d959506ffe89e416185)
+++ b/app/src/test/java/amazons/figures/EmptyFigureTest.java	(date 1701691710931)
@@ -1,6 +1,6 @@
 package amazons.figures;
 
-import amazons.IllegalMoveException;
+import amazons.board.Board;
 import amazons.board.MatrixBoard;
 import amazons.board.Position;
 import amazons.player.PlayerID;
@@ -9,18 +9,23 @@
 import static amazons.figures.EmptyFigure.*;
 
 public class EmptyFigureTest {
+
+    private final Board board = new MatrixBoard(3,3);
+    private final Position originPosition = new Position(0,0);
+
     @Test
     void testCanMoveTo(){
         assertThat(EMPTY_FIGURE.canMoveTo(null, null)).isEqualTo(false);
-        assertThat(EMPTY_FIGURE.canMoveTo(new Position(0,0), new MatrixBoard(3,3))).isEqualTo(false);
+        assertThat(EMPTY_FIGURE.canMoveTo(originPosition, board)).isEqualTo(false);
     }
 
     @Test
     void testMoveTo(){
-        assertThatExceptionOfType(IllegalMoveException.class)
-                .isThrownBy(() -> EMPTY_FIGURE.moveTo(null,null))
-                .withMessageMatching("A neutral figure can't be moved");
+        assertThatThrownBy(() -> EMPTY_FIGURE.moveTo(originPosition, board))
+                .isInstanceOf(IllegalMoveException.class)
+                .hasMessage("A neutral figure can't be moved");
     }
+
     @Test
     void testGetPlayerID(){
         assertThat(EMPTY_FIGURE.getPlayerID()).isEqualTo(PlayerID.NONE);
